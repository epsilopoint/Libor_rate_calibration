import matplotlib.pyplot as plt
import numpy as np
import QuantLib as ql
import math as mt
r=[]
t=[]
def MC_simulation(S0,lmb,mu,sigma,T,N):
    Nml=[]
    Nml=np.random.normal(0, 1, N)
    r.append(S0)
    t.append(0)
    delta_t=T/N
    for i in range(N-1):
        t.append(t[i]+delta_t)
    for i in range(N-1):
        r.append(r[i]+lmb*(mu-r[i])+sigma*(np.sqrt(delta_t)*Nml[i]))
    plt.plot(t, r, "r-.", lw=3, alpha=0.6)
    plt.title("Simmulation")
    return r,t
S_x=0
S_y=0
S_xx=0
S_yy=0
S_xy=0
lmb=0

def Callibration(T,r):
    N=len(r)
    delta_t=T/N
    S_x=0
    S_y=0
    S_xx=0
    S_yy=0
    S_xy=0
    lmb=0
    a=0
    b=0
    mu=0
    sigma=0
    for i in range(N):
        S_x=S_x+r[i]
        S_xx=S_xx+r[i]*r[i]
    for j in range(N-1):
        S_y=S_y+r[j+1]
        S_yy=S_yy+r[j+1]*r[j+1]
        S_xy=S_xy+r[j]*r[j+1]
    a=(N*S_xy-S_x*S_y)/(N*S_xx-S_x*S_x)
    b=(S_y-a*S_x)/N
    sd_epsilon=np.sqrt((N*S_yy-S_y*S_y-a*(N*S_xy-S_x*S_y))/(N*(N-2)))
    lmb=-mt.log(a)/delta_t
    mu=b/(1-a)
    sigma=sd_epsilon*mt.sqrt((-2*mt.log(a))/(delta_t*(1-a*a)))
    return lmb,mu,sigma
    
s=[6.659, 6.76, 6.97, 6.964, 7.453, 7.214, 7.047, 6.978, 6.811, 6.725, 6.618, 5.997,
   5.284, 4.925, 4.67, 4.33, 4.259, 4.055, 3.835, 3.6, 2.65, 2.311, 2.492, 2.445,
   2.42, 2.496, 3.006, 2.613, 2.634, 2.251, 2.07, 1.943, 1.813, 1.664, 1.705, 1.447,
   1.477, 1.368, 1.34, 1.362, 1.2214, 1.2014, 1.2789, 1.4714, 1.2857, 1.4551, 1.4867, 1.4582,
   1.4607, 1.3645, 1.3401, 1.8082, 2.0764, 2.4682, 2.4632, 2.3001, 2.4445, 2.5289, 2.9607, 3.1004,
   3.271, 3.5114, 3.842, 3.7101, 3.7789, 3.8632, 4.1745, 4.3123, 4.4067, 4.6765, 4.7379, 4.8226,
   4.9412, 5.1526, 5.2476, 5.4217, 5.4139, 5.766, 5.591, 5.4501, 5.2985, 5.3348, 5.2439, 5.3130,
   5.4414, 5.3328, 5.2009, 5.2967, 5.3885, 5.4048, 5.3832, 5.1860, 5.0618, 4.8771, 4.5219, 4.4227,
   3.4415, 2.8046, 2.5133, 2.8288, 3.0306, 3.4176, 3.2796, 3.2364, 3.3709, 3.7893, 2.8231, 2.3845,
   1.9024, 2.0644, 2.1173, 1.9351, 1.6791, 1.6776, 1.5, 1.4231, 1.2691, 1.2275, 1.0844, 0.9993,
   0.8979, 0.8516, 0.8733, 0.9598, 1.13, 1.188, 1.1178, 0.9436, 0.8044, 0.7681, 0.7644, 0.7839,
   0.7818, 0.7934, 0.7797, 0.7701, 0.7392, 0.7269, 0.7272, 0.7767, 0.8332, 0.9086, 1.0003, 1.1003,
   1.1146, 1.0712, 1.0103, 1.0486, 1.0615, 1.0692, 1.0653, 1.0424, 0.9998, 0.9186, 0.8632, 0.8478,
   0.8155, 0.7619, 0.735, 0.7175, 0.6936, 0.6839, 0.6838, 0.6683, 0.6527, 0.6178, 0.5867, 0.5795,
   0.5756, 0.5546, 0.5571, 0.5497, 0.5383, 0.5422, 0.5558, 0.5592, 0.5771, 0.5524, 0.5621, 0.6044,
   0.6225, 0.6601, 0.7, 0.6965, 0.734, 0.7703, 0.7858, 0.8368, 0.8527, 0.8379, 0.9344, 1.0896,
   1.1534, 1.1408, 1.217, 1.2222, 1.266, 1.2592, 1.3171, 1.511, 1.556, 1.5778, 1.6031,1.6711,
   1.7069, 1.724, 1.8069, 1.7765, 1.7493, 1.7323, 1.7411, 1.7254, 1.7382, 1.8209, 1.9016, 2.0491,
   2.1926, 2.3701,2.5995,2.7321,2.7547,2.7596,2.7945,2.8215,2.8796,2.9935,3.1209,3.0783,
   3.0168,2.9149,2.816,2.7392,2.6569,2.2773,2.2043,1.9969,2.0041,1.9564,1.9684,
   1.9166,1.7367,0.9219,0.993,0.7422,0.59581,0.4793,0.44853,0.39387,0.34141,0.33588,0.33672,
   0.32083,0.29676,0.28014,0.2842,0.2646,0.24347,0.24105,0.23574,0.2265,0.28531,0.39201,0.5236]
lmb,mu,sigma=Callibration(20, s)
S0=s[0]
N=len(s)
delta_t=20/N
print(N)
MC_simulation(S0,lmb,mu,sigma,20,N)
t=[]
t.append(0)
for i in range(N-1):
    t.append(t[i]+delta_t)
plt.plot(t, s, "b-.", lw=3, alpha=0.6)
plt.title("Simmulation")
plt.show()

    

    

    
    
    
    
    